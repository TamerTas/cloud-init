package configdrive_test

import (
	"fmt"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"testing"

	. "github.com/smartystreets/goconvey/convey"
	. "github.com/tmrts/flamingo/pkg/util/testutil"

	"github.com/tmrts/flamingo/pkg/datasrc/provider/configdrive"
	"github.com/tmrts/flamingo/pkg/file"
	"github.com/tmrts/flamingo/pkg/sys"
	"github.com/tmrts/flamingo/pkg/sys/ssh"
)

func TestLocatesConfigDriveMountTarget(t *testing.T) {
	Convey("Given a mounted device with the label 'config-2'", t, func() {
		executor := sys.NewFuncExecutor(func(cmd string, args ...string) (string, error) {
			cmd = strings.Join(append([]string{cmd}, args...), " ")

			switch cmd {
			case "blkid -t LABEL='config-2' -odevice":
				return "/dev/cfg", nil
			case "findmnt --raw --noheadings --output TARGET /dev/cfg":
				return "/mnt/config", nil
			}

			return "", fmt.Errorf("unrecognized command")
		})

		Convey("It should locate where the device is mounted", func() {
			target, err := configdrive.FindMountTarget(executor)
			So(err, ShouldBeNil)

			So(target, ShouldEqual, "/mnt/config")
		})
	})
}

func TestRetrievesDataFromConfigDrive(t *testing.T) {
	Convey("Given a mounted config drive", t, func() {
		tmpdir, err := ioutil.TempDir("", "flamingotest")
		So(err, ShouldBeNil)
		defer os.RemoveAll(tmpdir)

		dataPath := strings.Join([]string{tmpdir, "openstack", "2012-08-10"}, "/")
		err = os.MkdirAll(dataPath, 0755)
		So(err, ShouldBeNil)

		buf, err := ioutil.ReadFile("../openstack/test_metadata/2012-08-10.json")
		err = file.New(filepath.Join(dataPath, "meta_data.json"), file.Contents(string(buf)))
		So(err, ShouldBeNil)

		err = file.New(filepath.Join(dataPath, "user_data"), file.Contents("#cloud-config\n"))
		So(err, ShouldBeNil)

		mount := &configdrive.Mount{tmpdir}

		Convey("It should return a metadata digest", func() {
			md, err := mount.FetchMetadata()
			So(err, ShouldBeNil)

			digest := md.Digest()
			So(digest.Hostname, ShouldEqual, "test.novalocal")
			So(digest.SSHKeys["mykey"], ShouldConsistOf,
				ssh.Key("ssh-rsa RSA_PUBLIC_KEY Generated by Nova"))
		})

		Convey("It should return user-data", func() {
			userdata, err := mount.FetchUserdata()
			So(err, ShouldBeNil)

			So(userdata["user-data"], ShouldEqual, "#cloud-config\n")
		})
	})
}
