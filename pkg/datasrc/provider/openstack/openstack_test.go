package openstack_test

import (
	"io/ioutil"
	"net/http"
	"path/filepath"
	"strings"
	"testing"

	. "github.com/smartystreets/goconvey/convey"
	"github.com/tmrts/flamingo/pkg/sys/ssh"
	. "github.com/tmrts/flamingo/pkg/util/testutil"

	"github.com/tmrts/flamingo/pkg/datasrc/provider"
	"github.com/tmrts/flamingo/pkg/datasrc/provider/openstack"
)

const (
	testMetadataDir = "test_metadata"
)

func TestGoogleComputeMetadataRetrieval(t *testing.T) {
	Convey("Given a OpenStack meta-data service", t, func() {
		// mock OpenStack metadata server
		server := NewMockServer(func(w http.ResponseWriter, r *http.Request) {
			if strings.Contains(r.URL.String(), "2012-08-10/meta_data.json") {
				json_path := filepath.Join(testMetadataDir, "2012-08-10.json")

				buf, err := ioutil.ReadFile(json_path)
				if err != nil {
					http.Error(w, err.Error(), http.StatusBadRequest)
					return
				}

				w.Write(buf)
			} else if strings.Contains(r.URL.String(), "user_data") {
				w.Write([]byte("#cloud-config\n"))
			} else {
				http.Error(w, "requested resource is not found", http.StatusNotFound)
			}
		})

		service := openstack.MetadataService{
			URL: provider.FormatURL(server.URL + "/%v/%v"),
		}

		Convey("It should retrieve meta-data from OpenStack meta-data service", func() {
			digest, err := service.FetchMetadata()
			So(err, ShouldBeNil)

			So(digest.Hostname, ShouldEqual, "test.novalocal")

			So(digest.SSHKeys["mykey"], ShouldConsistOf,
				ssh.Key("ssh-rsa RSA_PUBLIC_KEY Generated by Nova"))
		})

		Convey("It should retrieve user-data from OpenStack meta-data service", func() {
			userdata, err := service.FetchUserdata()
			So(err, ShouldBeNil)

			So(userdata["user-data"], ShouldEqual, "#cloud-config\n")
		})

	})
}
